from dotenv import load_dotenv
import os
from llama_cloud_services import LlamaParse
from llama_index.core import SimpleDirectoryReader
from agno.vectordb.qdrant import Qdrant
from agno.knowledge.text import TextKnowledgeBase, TextReader
from agno.knowledge.pdf import PDFKnowledgeBase,    PDFReader
from llama_index.embeddings.fastembed import FastEmbedEmbedding
from agno.embedder.google import GeminiEmbedder
import frappe
config = frappe.get_site_config()
@frappe.whitelist()
def enqueue_parse_documents(doc, method=None):

    frappe.enqueue('utgbuddy.app.embedding.data.parse_documents', doc=doc, queue='long')

@frappe.whitelist()
def parse_documents(doc):
    try:
        os.environ['LLAMA_CLOUD_API_KEY'] = config.get("llama_cloud_api_key")
        qdrant_url = config.get("qdrant_url")
        qdrant_api_key = config.get("qdrant_api_key")
        os.environ['GOOGLE_API_KEY'] = config.get('gemini_api_key')

        # library =frappe.get_doc("Stuent Library", library)
        # data = frappe._dict(data)
        # library = frappe.get_doc("Student Library", doc.library)
        collection_name = doc.library
        parser = LlamaParse(result_type="text")
        extension = doc.file_url.split('.')[-1]
        file_extractor = {".pdf": parser}
        if extension == "pptx":
            file_extractor = {".pptx": parser}
        elif extension == "docx":
            file_extractor = {".docx": parser}
        elif extension == "doc":
            file_extractor = {".doc": parser}

        documents = SimpleDirectoryReader(
            input_files=[get_file(doc.file_url.split('/')[-1])], 
            file_extractor=file_extractor
        ).load_data()

        # Save extracted text to a .txt file
        output_txt_file = get_file(file_name=f"{doc.library}.txt")

        with open(output_txt_file, "w", encoding="utf-8") as f:
            for doc in documents:
                f.write(doc.text + "\n\n")

        vector_db = Qdrant(
            collection=collection_name,
            url=qdrant_url,
            api_key=qdrant_api_key,
            embedder=GeminiEmbedder()
        )

        knowledge_base = TextKnowledgeBase(
        path=output_txt_file,
        vector_db=vector_db,
        reader=TextReader()
        )

        # Comment out after first run
        knowledge_base.load(recreate=True, upsert=True)
    except Exception as e:
        frappe.log_error(frappe.get_traceback(), f"Error parsing documents: {e}")

@frappe.whitelist()
def get_file(file_name):
    return frappe.get_site_path('public', 'files', file_name)