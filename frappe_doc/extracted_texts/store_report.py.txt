# Copyright (c) 2024, Jokoor and contributors
# For license information, please see license.txt

import frappe
from frappe import _
from frappe.utils import flt


def execute(filters=None):
	columns, data = get_columns(filters), get_data(filters)
	return columns, data

# Additional Columns for the Report

def get_columns(filters=None):
    return [
        {
            "fieldname": "item_code",
            "label": "Item Code",
            "fieldtype": "Data",
            "width": 150
        },
        
        
        {
            "fieldname": "valuation_rate",
            "label": "Valuation Rate",
            "fieldtype": "Currency",
            'precision': 0,
            "width": 150
        },
        {
            "fieldname": "store_balance",
            "label": "Store Balance",
            "fieldtype": "Float" if filters.get('value_or_qty') and filters.get('value_or_qty') == "Qty" else "Currency",
            'precision': 2,
            "width": 150
        },
        
        
        {
            "fieldname": "main_bar",
            "label": "Main Bar",
            "fieldtype": "Float" if filters.get('value_or_qty') and filters.get('value_or_qty') == "Qty" else "Currency",
            'precision': 2,
            "width": 150
        },
        {
            "fieldname": "staff_canteen",
            "label": "Staff Canteen",
            "fieldtype": "Float" if filters.get('value_or_qty') and filters.get('value_or_qty') == "Qty" else "Currency",
            'precision': 2,
            "width": 150
        },
        {
            "fieldname": "house_keeping",
            "label": "House Keeping",
            "fieldtype": "Float" if filters.get('value_or_qty') and filters.get('value_or_qty') == "Qty" else "Currency",
            'precision': 2,
            "width": 150
        },
        {
            "fieldname": "conference_beverage",
            "label": "Conference Beverage",
            "fieldtype": "Float" if filters.get('value_or_qty') and filters.get('value_or_qty') == "Qty" else "Currency",
            'precision': 2,
            "width": 150
        },
        {
            "fieldname": "pool_bar",
            "label": "Pool Bar",
            "fieldtype": "Float" if filters.get('value_or_qty') and filters.get('value_or_qty') == "Qty" else "Currency",
            'precision': 2,
            "width": 150
        },
        {
            "fieldname": "pizza",
            "label": "Pizza",
            "fieldtype": "Float" if filters.get('value_or_qty') and filters.get('value_or_qty') == "Qty" else "Currency",
            'precision': 2,
            "width": 150
        },
        {
            "fieldname": "afra",
            "label": "Afra",
            "fieldtype": "Float" if filters.get('value_or_qty') and filters.get('value_or_qty') == "Qty" else "Currency",
            'precision': 2,
            "width": 150
        },
        {
            "fieldname": "conference_food",
            "label": "Conference Food" if filters.get('value_or_qty') and filters.get('value_or_qty') == "Qty" else "Currency",
            "fieldtype": "Float",
            'precision': 2,
            "width": 150
        },
        {
            "fieldname": "breakfast",
            "label": "Breakfast",
            "fieldtype": "Float" if filters.get('value_or_qty') and filters.get('value_or_qty') == "Qty" else "Currency",
            'precision': 2,
            "width": 150
        },
        {
            "fieldname": "allacart",
            "label": "Allacart",
            "fieldtype": "Float" if filters.get('value_or_qty') and filters.get('value_or_qty') == "Qty" else "Currency",
            'precision': 2,
            "width": 150
        },
        {
            "fieldname": "kitchen",
            "label": "Kitchen",
            "fieldtype": "Float" if filters.get('value_or_qty') and filters.get('value_or_qty') == "Qty" else "Currency",
            'precision': 2,
            "width": 150
        },
        {
            "fieldname": "total_outgoing",
            "label": "Total Outgoing",
            "fieldtype": "Float" if filters.get('value_or_qty') and filters.get('value_or_qty') == "Qty" else "Currency",
            'precision': 2,
            "width": 150
        }
    ]

def get_data(filters):
    stock_report = {}
    # all the items list and then get all the stock entry with purpose as Material transfer from store 
    stock_entry = frappe.get_all('Stock Entry', {'stock_entry_type': 'Material Transfer', 'posting_date': ['between', [filters.get('from_date'), filters.get('to_date')]]})
    for se in stock_entry:
        entries = frappe.get_all('Stock Entry Detail', {'parent': se.name, 's_warehouse': 'Stores - BHR', 'item_code': ['!=', '']}, ['item_code', 'qty', 't_warehouse'])
        for entry in entries:
            if filters.get('item') and entry.item_code != filters.get('item'):
                continue
            item_code = entry.item_code

            if filters.get('item_group') and frappe.db.get_value("Item", item_code, "item_group") != filters.get('item_group'):
                continue

            qty = entry.qty
            t_warehouse = entry.t_warehouse
            if entry.t_warehouse == 'Main Bar - BHR':
                t_warehouse = 'main_bar'
            elif entry.t_warehouse == 'Staff Canteen - BHR':
                t_warehouse = 'staff_canteen'
            elif entry.t_warehouse == 'House Keeping - BHR':
                t_warehouse = 'house_keeping'
            elif entry.t_warehouse == 'Conference Beverage - BHR':
                t_warehouse = 'conference_beverage'
            elif entry.t_warehouse == 'Pool Bar - BHR':
                t_warehouse = 'pool_bar'
            elif entry.t_warehouse == 'Pizza - BHR':
                t_warehouse = 'pizza'
            elif entry.t_warehouse == 'Afra - BHR':
                t_warehouse = 'afra'
            elif entry.t_warehouse == 'Conference Food - BHR':
                t_warehouse = 'conference_food'
            elif entry.t_warehouse == 'Breakfast - BHR':
                t_warehouse = 'breakfast'
            elif entry.t_warehouse == 'Allacart - BHR':
                t_warehouse = 'allacart'
            elif entry.t_warehouse == 'Kitchen - BHR':
                t_warehouse = 'kitchen'
            
            if item_code not in stock_report:
                valuation_rate = frappe.db.get_value("Item", item_code, "last_purchase_rate") or frappe.db.get_value("Item", item_code, "valuation_rate") or 1
                store_balance = frappe.db.get_value("Bin", {"item_code": item_code}, "actual_qty")
                if filters.get('value_or_qty') and filters.get('value_or_qty') == "Value":
                    store_balance = flt(frappe.db.get_value("Bin", {"item_code": item_code}, "actual_qty")) * flt(valuation_rate)

                stock_report[item_code] = {
                    'item_code': item_code,
                    'main_bar': 0,
                    'staff_canteen': 0,
                    'house_keeping': 0,
                    'conference_beverage': 0,
                    'pool_bar': 0,
                    'pizza': 0,
                    'afra': 0,
                    'conference_food': 0,
                    'breakfast': 0,
                    'allacart': 0,
                    'kitchen': 0,
                    'uom': frappe.db.get_value("Item", item_code, "stock_uom"),
                    'store_balance':  store_balance,
                    'valuation_rate': valuation_rate,
                    'total_outgoing': 0
                
                }
            if t_warehouse in stock_report[item_code]:
                if filters.get('value_or_qty') and filters.get('value_or_qty') == "Qty":
                    stock_report[item_code][t_warehouse] += flt(qty)
                else:
                    stock_report[item_code][t_warehouse] += flt(qty) * flt(stock_report[item_code]['valuation_rate'])
            else:
                if filters.get('value_or_qty') and filters.get('value_or_qty') == "Qty":
                    stock_report[item_code][t_warehouse] = flt(qty)
                else:
                    stock_report[item_code][t_warehouse] = flt(qty) * flt(stock_report[item_code]['valuation_rate'])
            for items, totals in stock_report.items():
                if filters.get('value_or_qty') and filters.get('value_or_qty') == "Qty":
                    stock_report[items]['total_outgoing'] = flt(stock_report[items]['main_bar']) + flt(stock_report[items]['staff_canteen']) + flt(stock_report[items]['house_keeping']) + flt(stock_report[items]['conference_beverage']) + flt(stock_report[items]['pool_bar']) + flt(stock_report[items]['pizza']) + flt(stock_report[items]['afra']) + flt(stock_report[items]['conference_food']) + flt(stock_report[items]['breakfast']) + flt(stock_report[items]['allacart']) + flt(stock_report[items]['kitchen'])
                else:
                    stock_report[items]['total_outgoing'] = flt(stock_report[items]['main_bar']) + flt(stock_report[items]['staff_canteen']) + flt(stock_report[items]['house_keeping']) + flt(stock_report[items]['conference_beverage']) + flt(stock_report[items]['pool_bar']) + flt(stock_report[items]['pizza']) + flt(stock_report[items]['afra']) + flt(stock_report[items]['conference_food']) + flt(stock_report[items]['breakfast']) + flt(stock_report[items]['allacart']) + flt(stock_report[items]['kitchen'])
                    
    # Sort the stock_report by item_code alphabetically and return
    return sorted(stock_report.values(), key=lambda x: x['item_code'])
