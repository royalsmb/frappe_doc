from typing import Optional
from textwrap import dedent
from utgbuddy.app.flashcard import generate_flashcards
from utgbuddy.app.quiz import generate_quiz
from utgbuddy.app.notes import generate_smart_notes



from utgbuddy.app.agent import agent as _agent
import frappe

@frappe.whitelist(allow_guest=True)
def chat_agent(message: Optional[str] = None):
    phone_id = "3611704"
    if frappe.session.user == "Guest":  
        user = frappe.get_doc("User", {"phone": phone_id})
        frappe.set_user(user.name)
    agent = _agent("khan_kunda")
    if not frappe.db.exists("Student Library", message):
        return agent.run("Introduce yourself as 'UTGBuddy. Kindly ask them enter the subject code they get from utgbuddy portal to get started.").get_content_as_string()
    else:
        session = frappe.get_doc("Student Session", {"owner": frappe.session.user, "status": "Open"})
        if not session.subject:
            if message:
                session.subject = message
                session.save()
                frappe.db.commit()
                return select_event(library_id=message)
            else:
                return agent.run("Introduce yourself as 'UTGBuddy'. Inform the user that you are here to help and let them select what they want to do.").get_content_as_string()
        else:
            subject = session.subject
            return select_event(library_id=subject)
#
@frappe.whitelist(allow_guest=True)
def select_event(library_id, question:Optional[str] = None):
    

    agent = _agent("khan_kunda") 

    session = frappe.get_doc("Student Session", {"owner": frappe.session.user, "status": "Open"})
    if not session.event:
        events = {
                    1: "Chat With Notes",
                    2: "Quizz",
                    3: "Flashcards",
                    4: "Study Notes",
                    5: "Q&A",
                }
        if question and question.isdigit():
            
            selected_event = events[int(question)]
            session.event = selected_event
            session.save()
            frappe.db.commit()
            return event(library_id)

            
        else:
            prompt_no_event = dedent(f"""\
                    Introduce yourself as 'UTGBuddy'. Inform the user that you are here to help and let them select what they want to do. with the following events {events}
                """)
            return agent.run(prompt_no_event).get_content_as_string()
        

    else:
        return event(library_id)




@frappe.whitelist(allow_guest=True)
def chat_with_notes_agent(question: Optional[str] = None):
    agent = _agent("khan_kunda")

    docs = frappe.get_all("Student Library", {"owner": frappe.session.user}, ["name", "title", "idx"])
    if not docs:
        prompt_no_subjects = dedent("""\
            Introduce yourself as 'UTGBuddy'. Inform the user that there are currently no subjects available in the library. 
            Kindly ask them to upload study materials to get started by visitng the www.utgbuddy.com portal
        """)
        return agent.run(prompt_no_subjects).get_content_as_string()

    
    selected_subject = frappe.get_doc("Student Library", {"idx": 0}).title

    if not question:
        return agent.run("Ask the user what they would like to learn about today.").get_content_as_string()
    if question and question.isdigit():
        subjects = frappe.get_all("Student Library", {"owner": frappe.session.user}, ["title", "idx"])
        subject_index = 0

        if 0 <= subject_index < len(subjects):
            

            # Create a new session
            frappe.get_doc({
                "doctype": "Student Session",
                "status": "Open"
            }).insert(ignore_permissions=True)
            frappe.db.commit()

            # Inform AI to confirm the selection
            prompt_confirm_selection = dedent(f"""\
                Introduce yourself as 'UTGBuddy'. Confirm the user's selection of {selected_subject}. 
                Tell them they can now ask questions related to this subject.
            """)
            return agent.run(prompt_confirm_selection).get_content_as_string()
    else:
        subject_list = "\n".join([f"{doc['idx']}. {doc['title']}" for idx, doc in enumerate(docs)])
        prompt_subject_selection = dedent(f"""\
        Introduce yourself as 'UTGBuddy'. Tell the user you are here to help.
        Then, ask the user to choose a subject from the list below by replying with the corresponding number:

        {subject_list}
        """)

        return agent.run(prompt_subject_selection).get_content_as_string()


    
    retrieved_docs = agent.get_relevant_docs_from_knowledge(question)
    selected_subject = "Modern Physics"

    # Step 7: Generate a response based on the selected subject
    prompt_answer_question = dedent(f"""\
        Answer the following question in a clear and concise manner. 
        Ensure the response is not more than 1000 characters. 

        **Subject:** {selected_subject}  
        **Question:** {question}  

        **Relevant Study Notes:**  
        {retrieved_docs}

        Keep the response academic, informative, and easy to understand.
    """)

    answer =  agent.run(prompt_answer_question)
    return answer.get_content_as_string()




    
@frappe.whitelist(allow_guest=True)
def event(library_id):
    event = frappe.db.get_value("Student Session", {"owner": frappe.session.user, "status": "Open"}, "event")
    if event == "Chat with notes":
        pass
        # return chat_with_notes_agent(library_id=library_id, question=None)
    elif event == "Quizz":
        return generate_quiz(library_id=library_id)
    elif event == "Flashcards":
        return generate_flashcards(library_id=library_id)
    elif event == "Study Notes":
        return generate_smart_notes(library_id=library_id)
    else:
        return "No event found"

    
@frappe.whitelist(allow_guest=True)
def get_note_title_agent():
    agent = _agent("gamswitch")
    content = agent.get_relevant_docs_from_knowledge("Get the title of the study notes.")
    
    answer = agent.run(f"Give me a nice title for the labelling of the study notes. {content}")
    return answer.get_content_as_string()
