# Copyright (c) 2024, Jokoor and contributors
# For license information, please see license.txt

import frappe
from frappe.utils import cint, flt, cstr, nowdate, getdate, add_days, get_first_day, get_last_day

def execute(filters=None):
	columns, data = get_columns(), get_data(filters)
	return columns, data

def get_columns():
	# report for room sales of the hotel and the payment details of status completed and checkin status

	columns = [
		# checkin id
		{
			"fieldname": "checkin_id",
			"label": "Checkin ID",
			"fieldtype": "Link",
			"options":"Hotel Check In",
			"width": 150

		},
		{
			"fieldname": "room",
			"label": "Room",
			"fieldtype": "Link",
			"options": "Rooms",
			"width": 70
		},
		{
			"fieldname": "guest",
			"label": "Guest",
			"fieldtype": "Data",
			"width": 150
		},
		{
			"fieldname": "room_type",
			"label": "Room Type",
			"fieldtype": "Link",
			"options": "Room Type",
			"width": 100
		},
		{
			"fieldname": "checkin",
			"label": "Checkin",
			"fieldtype": "Date",
			"width": 100
		},
		{
			"fieldname": "checkout",
			"label": "Checkout",
			"fieldtype": "Date",
			"width": 100
		},
		# creation time
		{
			"fieldname": "time",
			"label": "Time",
			"fieldtype": "Data",
			"width": 100
		},
		
		# channel
		{
			"fieldname": "channel",
			"label": "Channel",
			"fieldtype": "Data",
			"width": 100
		},
		
		{
			"fieldname": "total_amount",
			"label": "Total Amount",
			"fieldtype": "Currency",
			"width": 150
		},
		{
			"fieldname": "payment_status",
			"label": "Payment Status",
			"fieldtype": "Data",
			"width": 100
		},
		{
			"fieldname": "payment_received",
			"label": "Payment Received",
			"fieldtype": "Currency",
			"width": 150
		},
		# outsatnding amount
		{
			"fieldname": "outstanding_amount",
			"label": "Outstanding Amount",
			"fieldtype": "Currency",
			"width": 100
		}
	]
	return columns

def get_data(filters):
	# checkins of sfrom_dte to_date
	checkins = frappe.get_all("Hotel Check In", {"docstatus": 1, "creation": ["between", [filters.get("from_date"), filters.get("to_date")]]}, {"name", "room", "guest_name", "check_in", "check_out", "channel", "total_amount", "creation", "status"})

	data = []
	booking_status = ""
	for checkin in checkins:
		
		if filters.get("booking_status") == "Checked In":
			booking_status = "To Check Out"
		elif filters.get("booking_status") == "Checked Out":
			booking_status = "Completed"
		creation = checkin.creation
		creation_time = creation.strftime("%H:%M:%S")
		invoices = frappe.get_all("Sales Invoice", {"check_in_id": checkin.name, "custom_invoice_type": "Stay"}, ["name", "grand_total", "outstanding_amount", "status"])
		if not invoices:
			continue
		outstanding = 0
		status = ""
		grand_total = 0
		due_date = ""
		for invoice in invoices:
			outstanding += flt(invoice.outstanding_amount)
			grand_total += flt(invoice.grand_total)
			due_date = frappe.db.get_value("Sales Invoice", invoice.name, "due_date")
		if outstanding == 0:
			status = "Paid"
		elif outstanding > 0 and grand_total > outstanding:
			status = "Partial"
		elif getdate(due_date) < getdate(nowdate()) and outstanding > 0:
			status = "Overdue"
		else:
			status = "Unpaid"
		
		if filters.get("room") and filters.get("room") != checkin.room:
			continue
		if filters.get("guest") and filters.get("guest") != checkin.guest_name:
			continue
		if filters.get("channel") and filters.get("channel") != checkin.channel:
			continue
		if	filters.get("room_type") and filters.get("room_type") != frappe.db.get_value("Rooms", checkin.room, "room_type"):
			continue
		# if filters.get("payment_status") and filters.get("payment_status") != frappe.db.get_value("Sales Invoice", {"check_in_id": checkin.name}, "status"):
		# 	continue
		if filters.get("channel") and filters.get("channel") != checkin.channel:
			continue
		if filters.get("payment_status") and filters.get("payment_status") != status:
			continue
		if booking_status and booking_status != checkin.status:
			continue
			
		data.append({
			"checkin_id": checkin.name,
			"room": checkin.room,
			"guest": checkin.guest_name,
			"room_type": frappe.db.get_value("Rooms", checkin.room, "room_type"),				
			"checkin": checkin.check_in,
			"checkout": checkin.check_out,
			"time": creation_time,
			"channel": checkin.channel,
			"total_amount": grand_total,
			"payment_status": status,
			"payment_received": flt(grand_total) - flt(outstanding),
			"outstanding_amount": outstanding
		})
	return data