import "clsx";
import { p as push, l as ensure_array_like, c as pop, e as stringify, f as bind_props } from "./index2.js";
import { f as posSettingsApiStore, b as currentUserSession, c as customersApiStore, u as formatDate, e as randomString } from "./fetcher.js";
import { k as get } from "./exports.js";
import { a as attr } from "./attributes.js";
import { e as escape_html } from "./escaping.js";
import { N as fallback } from "./utils.js";
function html(value) {
  var html2 = String(value ?? "");
  var open = "<!---->";
  return open + html2 + "<!---->";
}
function X_close($$payload) {
  $$payload.out += `<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><g id="close"><g id="Close Square"><path id="Stroke 1 (Stroke)" fill-rule="evenodd" clip-rule="evenodd" d="M18.701 5.29807C19.0916 5.6886 19.0916 6.32176 18.701 6.71229L6.71356 18.6998C6.32303 19.0903 5.68987 19.0903 5.29934 18.6998C4.90882 18.3093 4.90882 17.6761 5.29934 17.2856L17.2868 5.29807C17.6774 4.90755 18.3105 4.90755 18.701 5.29807Z" fill="black"></path><path id="Stroke 2 (Stroke)" fill-rule="evenodd" clip-rule="evenodd" d="M5.29295 5.29285C5.68352 4.90237 6.31668 4.90243 6.70717 5.293L18.7047 17.293C19.0951 17.6836 19.0951 18.3167 18.7045 18.7072C18.3139 19.0977 17.6808 19.0976 17.2903 18.7071L5.2928 6.70706C4.90232 6.3165 4.90239 5.68333 5.29295 5.29285Z" fill="black"></path></g></g></svg>`;
}
function Receipt($$payload, $$props) {
  push();
  const settings = posSettingsApiStore.get().data || {};
  let {
    order,
    cashierName = get(currentUserSession)?.fullname || "N/A",
    businessName = settings.business_name,
    // 'Baobab Holiday Resort',
    heroImage = settings.print_logo,
    //assets+'/baobab.jpg',
    address = settings.address,
    //'Bijilo, Banjul',
    contact = settings.contact,
    //'+220 3774608/ +220 7572632',
    isCredit,
    completed
  } = $$props;
  const customers = customersApiStore.get().data;
  const orderCustomer = customers.find((c) => c.name === order.customer);
  const paymentType = orderCustomer?.is_management ? "Management" : !isCredit ? "Cash" : "Credit";
  const receiptDetails = {
    date: formatDate(new Date(Date.now()), "w, WM dd, yyyy"),
    "receipt no": String(order.order_id).slice(-4),
    ...order.order_type === "room_service" ? { "order type": order.order_type } : {},
    ...completed ? { "payment method": order.payment_method } : {},
    "order status": !completed ? "Pending" : "Completed",
    "payment type": paymentType,
    name: order.order_type === "room_service" ? "" : order.customer,
    ...order.order_type === "room_service" ? { "Room Number": order.room } : {},
    "table no": order.table,
    cashier: cashierName
  };
  const each_array = ensure_array_like(Object.entries(receiptDetails));
  const each_array_1 = ensure_array_like(order.items);
  $$payload.out += `<div class="print hidden w-full"><section class="mx-auto flex flex-col items-center justify-center gap-4"><div class="grid place-items-center font-semibold"><img${attr("src", heroImage)} class="mb-2 h-24 max-w-full object-contain" alt="baobab"> <h1>${escape_html(businessName)}</h1> <p>${escape_html(address)}</p> <p>${escape_html(contact)}</p></div> <div class="flex w-full flex-col gap-2"><h2 class="text-center font-bold">Sales Receipt</h2> <div class="grid grid-cols-2 gap-1"><!--[-->`;
  for (let $$index = 0, $$length = each_array.length; $$index < $$length; $$index++) {
    let [key, value] = each_array[$$index];
    $$payload.out += `<p class="capitalize">${escape_html(key)}:</p> <p class="font-medium">${escape_html(value || "N/A")}</p>`;
  }
  $$payload.out += `<!--]--></div></div> <table class="small-text w-full table-auto border-collapse border-spacing-2 select-none rounded border text-left text-secondary"><thead class="sticky top-0 bg-light text-xs uppercase text-secondary"><tr><th class="svelte-vbvsea">Product</th><th class="svelte-vbvsea">Qty</th><th class="svelte-vbvsea">Price</th><th class="svelte-vbvsea">Amount</th></tr></thead><tbody><!--[-->`;
  for (let $$index_1 = 0, $$length = each_array_1.length; $$index_1 < $$length; $$index_1++) {
    let item = each_array_1[$$index_1];
    $$payload.out += `<tr class="border-b bg-white font-semibold text-secondary hover:bg-light/30"><td class="svelte-vbvsea">${escape_html(item.name)}</td><td class="svelte-vbvsea">${escape_html(item.quantity)}</td><td class="svelte-vbvsea">D${escape_html(item.price)}</td><td class="svelte-vbvsea">D${escape_html(Number(item.price) * Number(item.quantity))}</td></tr>`;
  }
  $$payload.out += `<!--]--></tbody></table> <p class="grid w-full grid-cols-2 justify-between gap-2 font-semibold"><span>Amount ${escape_html(!completed ? "Due" : isCredit || order.order_type === "Staff" ? "Credited" : "Paid")}:</span> <span class="text-xl">D${escape_html(order.total)}</span></p></section></div>`;
  pop();
}
function CheckboxInput($$payload, $$props) {
  push();
  let checked = fallback($$props["checked"], false);
  let id = fallback($$props["id"], () => "checkbox-" + randomString(5), true);
  let icon = fallback($$props["icon"], void 0);
  let name = fallback($$props["name"], () => randomString(5), true);
  let group = fallback($$props["group"], () => [], true);
  let value = fallback($$props["value"], "");
  let text = $$props["text"];
  let title = fallback($$props["title"], "");
  let disabled = fallback($$props["disabled"], false);
  let size = fallback($$props["size"], 24);
  const setValues = (checked2) => {
    if (!group) {
      group = [];
    }
    if (checked2) {
      if (group.includes(value)) return;
      group = Array.from(/* @__PURE__ */ new Set([...group, value]));
      return;
    }
    if (!group.includes(value)) return;
    group = group.filter((v) => v != value);
  };
  const updateChecked = (group2) => {
    if (!group2) {
      group2 = [];
    }
    const newChecked = group2.includes(value);
    if (newChecked === checked) return;
    checked = newChecked;
  };
  updateChecked(group);
  setValues(checked);
  $$payload.out += `<label${attr("class", `body-1 relative inline-flex cursor-pointer select-none items-center gap-2 ${stringify([disabled ? "cursor-not-allowed" : ""].filter(Boolean).join(" "))}`)}${attr("for", id)}${attr("style", `--size: ${stringify(size)}px; --inner-size: ${stringify(size - 1)}px; --icon-size: ${stringify(24 - 8)}px;`)}${attr("title", title)}><input${attr("disabled", disabled, true)} type="checkbox"${attr("name", name)}${attr("checked", checked, true)} hidden${attr("value", value)}${attr("id", id)} class="hidden"> <span${attr("class", `relative h-[--inner-size] w-[--inner-size] border-secondary/40 bg-white transition-colors duration-[20ms] ${stringify(checked ? "!border-accent" : "")} rounded-[3px] border-2`)}><svg class="absolute inset-0 !h-[--inner-size] !w-[--inner-size]" width="23" height="23" viewBox="0 0 23 23" fill="none" stroke="none" xmlns="http://www.w3.org/2000/svg">`;
  if (checked) {
    $$payload.out += "<!--[-->";
    $$payload.out += `<path class="translate-x-[-0.5px] translate-y-[-1px] fill-accent" d="M17.392 7.39194C17.1784 7.23702 16.9123 7.17279 16.6515 7.21325C16.3908 7.25371 16.1566 7.39558 16 7.60794L11.008 14.3999L7.80802 11.8479C7.59585 11.6824 7.32662 11.608 7.05957 11.641C6.79252 11.674 6.54951 11.8118 6.38402 12.0239C6.21852 12.2361 6.14409 12.5053 6.1771 12.7724C6.21011 13.0394 6.34785 13.2824 6.56002 13.4479L10.56 16.6479C10.7485 16.773 10.9754 16.8269 11.2 16.7999C11.3552 16.7993 11.5081 16.7629 11.6468 16.6935C11.7856 16.6242 11.9064 16.5237 12 16.3999L17.6 8.79994C17.6796 8.69415 17.7375 8.5736 17.7701 8.44529C17.8028 8.31698 17.8096 8.18345 17.7903 8.05247C17.7709 7.92149 17.7258 7.79565 17.6574 7.68226C17.589 7.56888 17.4988 7.47019 17.392 7.39194Z" fill="currentColor"></path>`;
  } else {
    $$payload.out += "<!--[!-->";
  }
  $$payload.out += `<!--]--></svg></span> `;
  if (icon) {
    $$payload.out += "<!--[-->";
    $$payload.out += `<span class="icon-parent h-[--icon-size] w-[--icon-size] min-w-[--icon-size]">`;
    if (typeof icon === "string") {
      $$payload.out += "<!--[-->";
      $$payload.out += `${html(icon)}`;
    } else {
      $$payload.out += "<!--[!-->";
      $$payload.out += `<!---->`;
      icon?.($$payload, {});
      $$payload.out += `<!---->`;
    }
    $$payload.out += `<!--]--></span>`;
  } else {
    $$payload.out += "<!--[!-->";
  }
  $$payload.out += `<!--]--> ${escape_html(text)}</label>`;
  bind_props($$props, {
    checked,
    id,
    icon,
    name,
    group,
    value,
    text,
    title,
    disabled,
    size
  });
  pop();
}
export {
  CheckboxInput as C,
  Receipt as R,
  X_close as X
};
