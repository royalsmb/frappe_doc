import { f as bind_props, l as ensure_array_like, i as store_get, e as stringify, u as unsubscribe_stores, p as push, c as pop, j as copy_payload, k as assign_payload, m as store_set } from "../../../../chunks/index2.js";
import { v as categories, x as activeCategory, y as getRandomLightColor, z as customersOptions, A as currentOrder, B as updateCurrentOrder, C as recentlyUpdated, D as restuarantTables, E as createCustomer, F as playSound, c as customersApiStore, G as getProductByBarcode, H as displayProducts, I as search, J as isGridView } from "../../../../chunks/fetcher.js";
import { S as Search, A as AutoCompleteSearch, o as onDestroy } from "../../../../chunks/AutoCompleteSearch.js";
import { a as attr } from "../../../../chunks/attributes.js";
import { e as escape_html } from "../../../../chunks/escaping.js";
import { N as fallback } from "../../../../chunks/utils.js";
import { b as addProduct, S as Select } from "../../../../chunks/Select.js";
import { C as Container } from "../../../../chunks/Label.js";
function SearchInput($$payload, $$props) {
  let { placeholder = "", value = "" } = $$props;
  $$payload.out += `<div class="relative w-full"><div class="pointer-events-none absolute inset-y-0 start-0 flex items-center ps-3">`;
  Search($$payload);
  $$payload.out += `<!----></div> <input${attr("value", value)} class="border-secondary/300 block w-full rounded border bg-gray-50 p-4 ps-10 text-sm text-secondary focus:border-accent focus:ring-accent" id="default-search"${attr("placeholder", placeholder)} type="search"></div>`;
  bind_props($$props, { value });
}
function CategorySelector($$payload) {
  var $$store_subs;
  const each_array = ensure_array_like(store_get($$store_subs ??= {}, "$categories", categories));
  $$payload.out += `<section class="flex flex-col gap-1"><h3 class="subheading">Categories</h3> <div class="scrollbar flex h-[calc(100vh-130px)] flex-col gap-3 overflow-y-auto"><!--[-->`;
  for (let $$index = 0, $$length = each_array.length; $$index < $$length; $$index++) {
    let category = each_array[$$index];
    $$payload.out += `<button${attr("class", `item-outline min-w-[100px] rounded-lg !border-4 p-2 capitalize transition-colors ${stringify([
      store_get($$store_subs ??= {}, "$activeCategory", activeCategory) === category ? "active" : ""
    ].filter(Boolean).join(" "))}`)}>${escape_html(category)}</button>`;
  }
  $$payload.out += `<!--]--></div></section>`;
  if ($$store_subs) unsubscribe_stores($$store_subs);
}
function ProductVariantModal($$payload, $$props) {
  push();
  let isOpen = fallback($$props["isOpen"], false);
  let onClose = $$props["onClose"];
  let product = $$props["product"];
  let onSelect = $$props["onSelect"];
  if (isOpen) {
    $$payload.out += "<!--[-->";
    const each_array = ensure_array_like(product.variants || []);
    $$payload.out += `<div class="fixed inset-0 z-50 flex items-center justify-center bg-black/50"><div class="w-full max-w-md rounded-lg bg-white p-6 shadow-xl"><h2 class="mb-4 text-xl font-semibold">Select Variant</h2> <div class="max-h-[50vh] space-y-2 overflow-y-auto pr-2"><!--[-->`;
    for (let $$index = 0, $$length = each_array.length; $$index < $$length; $$index++) {
      let variant = each_array[$$index];
      $$payload.out += `<button class="w-full rounded-lg border p-4 text-left hover:border-accent/50 hover:bg-accent/5 disabled:cursor-not-allowed disabled:opacity-50"${attr("disabled", variant.qty === 0 && product.is_stock, true)}><div class="flex items-center justify-between"><div><p class="font-medium">${escape_html(variant.name)}</p> <p class="text-sm text-gray-600">${escape_html(variant.product_name)}</p></div> <div class="text-right"><p class="font-medium">D${escape_html(variant.price)}</p> `;
      if (product.is_stock) {
        $$payload.out += "<!--[-->";
        $$payload.out += `<p class="text-sm text-gray-600">Stock: ${escape_html(variant.qty)}</p>`;
      } else {
        $$payload.out += "<!--[!-->";
      }
      $$payload.out += `<!--]--></div></div></button>`;
    }
    $$payload.out += `<!--]--></div> <div class="mt-4 flex justify-end"><button class="rounded-lg px-4 py-2 text-gray-600 hover:bg-gray-100">Cancel</button></div></div></div>`;
  } else {
    $$payload.out += "<!--[!-->";
  }
  $$payload.out += `<!--]-->`;
  bind_props($$props, { isOpen, onClose, product, onSelect });
  pop();
}
function TextImage($$payload, $$props) {
  push();
  let name = fallback($$props["name"], "John Doe");
  let size = fallback($$props["size"], "49px");
  let klass = fallback($$props["class"], "");
  $$payload.out += `<div${attr("style", `--size: ${stringify(size)}`)}${attr("class", `w-[--size] ${stringify(klass)}`)}><div class="flex h-[--size] w-[--size] items-center justify-center rounded bg-[--color]"${attr("style", `--color: ${stringify(getRandomLightColor())}`)}><div class="text-[22px] font-bold uppercase text-black">${escape_html(name.split(" ").reduce((abr, i) => abr + i.charAt(0), ""))}</div></div></div>`;
  bind_props($$props, { name, size, class: klass });
  pop();
}
function ProductCard($$payload, $$props) {
  push();
  let { product } = $$props;
  let showVariantModal = false;
  let isAvailable = !product.is_stock || product.is_stock && product.qty;
  function handleVariantSelect(variant) {
    addProduct(product, variant);
  }
  let $$settled = true;
  let $$inner_payload;
  function $$render_inner($$payload2) {
    ProductVariantModal($$payload2, {
      onClose: () => showVariantModal = false,
      onSelect: handleVariantSelect,
      product,
      get isOpen() {
        return showVariantModal;
      },
      set isOpen($$value) {
        showVariantModal = $$value;
        $$settled = false;
      }
    });
    $$payload2.out += `<!----> <button class="group relative h-full w-full overflow-hidden rounded-lg border-2 border-secondary/30 bg-white p-1 hover:border-accent/50 hover:shadow-sm disabled:cursor-not-allowed disabled:opacity-50 disabled:shadow-none disabled:hover:border-secondary/30 xl:p-2"${attr("disabled", !isAvailable, true)}><div class="relative aspect-square max-h-40 w-full overflow-hidden rounded-lg bg-gray-100">`;
    if (product.image) {
      $$payload2.out += "<!--[-->";
      $$payload2.out += `<img${attr("src", product.image)}${attr("alt", product.name)} class="h-full w-full object-cover transition-transform duration-300 group-hover:scale-110">`;
    } else {
      $$payload2.out += "<!--[!-->";
      TextImage($$payload2, {
        size: "100%",
        class: "!h-full",
        name: product.product_name
      });
    }
    $$payload2.out += `<!--]--> `;
    if (product.is_stock) {
      $$payload2.out += "<!--[-->";
      $$payload2.out += `<span class="absolute left-2 top-2 rounded bg-white/90 px-2 py-1 text-sm font-medium text-secondary shadow-sm">${escape_html(product.qty)}</span>`;
    } else {
      $$payload2.out += "<!--[!-->";
    }
    $$payload2.out += `<!--]--> `;
    if (product.variants?.length) {
      $$payload2.out += "<!--[-->";
      $$payload2.out += `<span class="absolute right-2 top-2 rounded bg-accent/90 px-2 py-1 text-sm font-medium text-white shadow-sm">Variants</span>`;
    } else {
      $$payload2.out += "<!--[!-->";
    }
    $$payload2.out += `<!--]--></div> <div class="mt-2 text-left"><h3 class="font-medium text-gray-900">${escape_html(product.product_name)}</h3> <p class="text-sm text-gray-500">${escape_html(product.name)}</p> <p class="mt-1 font-medium text-secondary">D ${escape_html(product.price)}</p></div></button>`;
  }
  do {
    $$settled = true;
    $$inner_payload = copy_payload($$payload);
    $$render_inner($$inner_payload);
  } while (!$$settled);
  assign_payload($$payload, $$inner_payload);
  pop();
}
function ProductListItem($$payload, $$props) {
  push();
  let { product } = $$props;
  let showVariantModal = false;
  let isAvailable = !product.is_stock || product.is_stock && product.qty;
  let isReserve = product.is_stock && Number(product.qty || 0) <= 5 && Number(product.qty || 0) > 1;
  function handleVariantSelect(variant) {
    addProduct(product, variant);
  }
  let $$settled = true;
  let $$inner_payload;
  function $$render_inner($$payload2) {
    ProductVariantModal($$payload2, {
      onClose: () => showVariantModal = false,
      onSelect: handleVariantSelect,
      product,
      get isOpen() {
        return showVariantModal;
      },
      set isOpen($$value) {
        showVariantModal = $$value;
        $$settled = false;
      }
    });
    $$payload2.out += `<!----> <tr${attr("class", `cursor-pointer border-b ${stringify(isAvailable ? "hover:bg-gray-50" : "cursor-not-allowed")}`)}><td class="p-3"><div class="flex items-center gap-3">`;
    if (product.image) {
      $$payload2.out += "<!--[-->";
      $$payload2.out += `<img${attr("src", product.image)}${attr("alt", product.name)} class="h-10 w-10 rounded-lg object-cover">`;
    } else {
      $$payload2.out += "<!--[!-->";
      $$payload2.out += `<div class="h-10 w-10 rounded-lg bg-gray-100"></div>`;
    }
    $$payload2.out += `<!--]--> <div>${escape_html(product.name)} `;
    if (product.variants?.length) {
      $$payload2.out += "<!--[-->";
      $$payload2.out += `<span class="ml-2 rounded bg-accent/90 px-1.5 py-0.5 text-xs font-medium text-white">Variants</span>`;
    } else {
      $$payload2.out += "<!--[!-->";
    }
    $$payload2.out += `<!--]--></div></div></td><td class="p-3 text-right">D ${escape_html(product.price)}</td><td${attr("class", `p-3 text-right ${stringify(isReserve ? "text-yellow-600 " : !isAvailable ? "text-red-600" : "")}`)}>${escape_html(product.qty ?? "N/A")}</td></tr>`;
  }
  do {
    $$settled = true;
    $$inner_payload = copy_payload($$payload);
    $$render_inner($$inner_payload);
  } while (!$$settled);
  assign_payload($$payload, $$inner_payload);
  pop();
}
function NewCustomerModal($$payload, $$props) {
  push();
  let isOpen = fallback($$props["isOpen"], false);
  let onClose = $$props["onClose"];
  let onSubmit = $$props["onSubmit"];
  let newCustomer = { customer_name: "", phone: "", email: "" };
  if (isOpen) {
    $$payload.out += "<!--[-->";
    $$payload.out += `<div class="fixed inset-0 z-50 flex items-center justify-center bg-black/50"><div class="w-full max-w-md rounded-lg bg-white p-6 shadow-lg"><h3 class="mb-4 text-lg font-semibold">Add New Customer</h3> <form class="flex flex-col gap-4"><div><label for="customer_name" class="mb-1 block text-sm font-medium text-gray-700">Name *</label> <input type="text" id="customer_name"${attr("value", newCustomer.customer_name)} required class="w-full rounded-md border border-gray-300 px-3 py-2 focus:border-accent focus:outline-none"></div> <div><label for="phone" class="mb-1 block text-sm font-medium text-gray-700">Phone *</label> <input type="tel" id="phone"${attr("value", newCustomer.phone)} required class="w-full rounded-md border border-gray-300 px-3 py-2 focus:border-accent focus:outline-none"></div> <div><label for="email" class="mb-1 block text-sm font-medium text-gray-700">Email</label> <input type="email" id="email"${attr("value", newCustomer.email)} class="w-full rounded-md border border-gray-300 px-3 py-2 focus:border-accent focus:outline-none"></div> <div class="flex justify-end gap-3"><button type="button" class="rounded-md bg-gray-100 px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-200">Cancel</button> <button type="submit"${attr("disabled", true, true)} class="flex items-center gap-2 rounded-md bg-accent px-4 py-2 text-sm font-medium text-white hover:bg-accent/90 disabled:opacity-50">`;
    {
      $$payload.out += "<!--[!-->";
      $$payload.out += `Add Customer`;
    }
    $$payload.out += `<!--]--></button></div></form></div></div>`;
  } else {
    $$payload.out += "<!--[!-->";
  }
  $$payload.out += `<!--]-->`;
  bind_props($$props, { isOpen, onClose, onSubmit });
  pop();
}
function Order($$payload, $$props) {
  push();
  var $$store_subs;
  let orderTypes, currentNotes, isInvalid;
  let expandedItem = null;
  let inputValue = "";
  let selectedCustomer = void 0;
  const tagCategories = [
    {
      name: "Preferences",
      tags: [
        "No ice",
        "Extra ice",
        "Less sugar",
        "No sugar",
        "Extra spicy",
        "Medium spicy",
        "Not spicy"
      ]
    },
    {
      name: "Dietary",
      tags: [
        "Vegetarian",
        "Vegan",
        "Gluten-free",
        "Dairy-free",
        "Allergies",
        "Halal"
      ]
    },
    {
      name: "Cooking",
      tags: [
        "Well done",
        "Medium rare",
        "Medium well",
        "Extra sauce",
        "Sauce on side",
        "No sauce"
      ]
    },
    {
      name: "Service",
      tags: [
        "Takeaway",
        "Special request",
        "Priority",
        "Birthday special",
        "VIP guest"
      ]
    }
  ];
  function getSuggestions(value, currentSelectedTags) {
    const availableTags = tagCategories.map((category) => ({
      ...category,
      tags: category.tags.filter((tag) => !currentSelectedTags.includes(tag))
    })).filter((category) => category.tags.length > 0);
    {
      return availableTags;
    }
  }
  const staticOrderTypes = [
    { name: "Dine In", value: "dine_in" },
    { name: "Take Away", value: "take_away" }
  ];
  const searchTables = async (keyword) => {
    return [
      ...store_get($$store_subs ??= {}, "$restuarantTables", restuarantTables)
    ].filter((table) => {
      const lowercaseName = table.name.toLowerCase();
      const lowercaseKeyword = keyword.toLowerCase();
      return lowercaseName.includes(lowercaseKeyword) || lowercaseKeyword.includes(lowercaseName);
    });
  };
  const searchCustomers = async (keyword) => {
    return [...availableCustomerOptions].filter((customer) => {
      const lowercaseKeyword = keyword.toLowerCase();
      const lowercaseName = customer.customer_name.toLowerCase();
      const orderType = customer.is_management ? "management" : "";
      const roomNumber = customer.room ? `room: ${customer.room}` : "";
      const phoneNumber = customer.phone ? `phone: ${customer.phone}` : "";
      return lowercaseName.includes(lowercaseKeyword) || lowercaseKeyword.includes(lowercaseName) || orderType && (orderType.includes(lowercaseKeyword) || lowercaseKeyword.includes(orderType)) || roomNumber && (roomNumber.includes(lowercaseKeyword) || lowercaseKeyword.includes(roomNumber)) || phoneNumber && (phoneNumber.includes(lowercaseKeyword) || lowercaseKeyword.includes(phoneNumber));
    }).sort((a, b) => {
      const aName = a.customer_name.toLowerCase();
      const bName = b.customer_name.toLowerCase();
      if (aName === "walkin" || aName === "walk in" || aName === "walk-in") return -1;
      if (bName === "walkin" || bName === "walk in" || bName === "walk-in") return 1;
      return aName.localeCompare(bName);
    }).map((customer) => {
      const infos = [];
      if (customer.room) infos.push(`Room: ${customer.room}`);
      if (customer.is_management) infos.push("Management");
      if (customer.phone) infos.push(`Phone: ${customer.phone}`);
      return { ...customer, infos };
    });
  };
  let availableCustomerOptions = [];
  let isAddingNewCustomer = false;
  async function handleAddNewCustomer(newCustomer) {
    const { error, data } = await createCustomer(newCustomer).load();
    if (error) {
      playSound("error");
    }
    await customersApiStore.load(void 0, true);
    if (data) setCustomer(data);
    isAddingNewCustomer = false;
  }
  const setCustomer = (customer) => {
    updateCurrentOrder({
      ...store_get($$store_subs ??= {}, "$currentOrder", currentOrder),
      customer: String(customer?.name || (store_get($$store_subs ??= {}, "$currentOrder", currentOrder).order_type !== "room_service" ? "Walkin" : "")),
      room: customer?.room || void 0
    });
    selectedCustomer = { ...customer, value: customer?.name };
  };
  orderTypes = [
    ...selectedCustomer?.room ? [
      { name: "Room Service", value: "room_service" }
    ] : [],
    ...staticOrderTypes
  ];
  currentNotes = [];
  getSuggestions(inputValue, currentNotes);
  availableCustomerOptions = store_get($$store_subs ??= {}, "$customersOptions", customersOptions).sort((a, b) => {
    const aName = a.customer_name.toLowerCase();
    const bName = b.customer_name.toLowerCase();
    if (aName === "walkin" || aName === "walk in" || aName === "walk-in") return -1;
    if (bName === "walkin" || bName === "walk in" || bName === "walk-in") return 1;
    return aName.localeCompare(bName);
  });
  {
    if (store_get($$store_subs ??= {}, "$currentOrder", currentOrder)) {
      const total = store_get($$store_subs ??= {}, "$currentOrder", currentOrder).items.map((i) => Number(i.price) * i.quantity).reduce((total2, price) => price + total2, 0);
      updateCurrentOrder({
        ...store_get($$store_subs ??= {}, "$currentOrder", currentOrder),
        total
      });
    }
  }
  {
    if (store_get($$store_subs ??= {}, "$currentOrder", currentOrder) && selectedCustomer) {
      if (!selectedCustomer?.room && store_get($$store_subs ??= {}, "$currentOrder", currentOrder).room) {
        updateCurrentOrder({
          ...store_get($$store_subs ??= {}, "$currentOrder", currentOrder),
          room: "",
          table: store_get($$store_subs ??= {}, "$currentOrder", currentOrder).order_type === "room_service" ? "" : store_get($$store_subs ??= {}, "$currentOrder", currentOrder).table
        });
      }
    }
  }
  isInvalid = false;
  const each_array = ensure_array_like(store_get($$store_subs ??= {}, "$currentOrder", currentOrder).items);
  $$payload.out += `<div class="flex h-[calc(100vh-90px)] flex-col justify-between gap-6"><div class="flex flex-col gap-6"><div class="grid w-full grid-cols-3 gap-3"><div class="flex gap-2"><button aria-label="Add new customer" class="mt-[28px] flex h-[42px] items-center justify-center rounded-md border border-accent px-3 text-accent hover:bg-accent/10 svelte-11yptvf"><svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" fill-rule="evenodd"></path></svg></button> <div class="flex-1">`;
  AutoCompleteSearch($$payload, {
    label: "Customer",
    required: true,
    noResultText: "",
    search: searchCustomers,
    keyword: store_get($$store_subs ??= {}, "$currentOrder", currentOrder).customer || "Walkin",
    onCloseSelect: (r) => {
      const customer = availableCustomerOptions.find((c) => c.name === r?.value);
      console.log("customer", customer);
      if (!customer) return;
      setCustomer(customer);
    },
    placeholder: "Search customers"
  });
  $$payload.out += `<!----></div></div> `;
  Select($$payload, {
    label: "Order Type",
    onSelect: (option) => {
      updateCurrentOrder({
        ...store_get($$store_subs ??= {}, "$currentOrder", currentOrder),
        order_type: option?.value || store_get($$store_subs ??= {}, "$currentOrder", currentOrder).order_type
      });
    },
    value: store_get($$store_subs ??= {}, "$currentOrder", currentOrder).order_type,
    options: orderTypes
  });
  $$payload.out += `<!----> `;
  if (store_get($$store_subs ??= {}, "$currentOrder", currentOrder).order_type !== "room_service") {
    $$payload.out += "<!--[-->";
    AutoCompleteSearch($$payload, {
      noResultText: "",
      keyword: store_get($$store_subs ??= {}, "$currentOrder", currentOrder).table || "",
      onCloseSelect: (r) => {
        updateCurrentOrder({
          ...store_get($$store_subs ??= {}, "$currentOrder", currentOrder),
          table: String(r?.name || store_get($$store_subs ??= {}, "$currentOrder", currentOrder).table || "")
        });
      },
      containerClass: "w-full",
      label: "Table",
      search: searchTables
    });
  } else {
    $$payload.out += "<!--[!-->";
  }
  $$payload.out += `<!--]--></div> <div class="scrollbar relative h-[calc(100vh-80px-152px-24px-24px-55px-4px)] overflow-auto rounded shadow"><table class="small-text w-full table-auto border-collapse border-spacing-2 select-none border border-gray-200 text-left text-secondary"><thead class="sticky top-0 bg-light text-xs uppercase text-secondary"><tr><th class="svelte-11yptvf"></th><th class="svelte-11yptvf">Product</th><th class="svelte-11yptvf">Quantity</th><th class="svelte-11yptvf">Price</th><th class="svelte-11yptvf">Amount</th><th class="svelte-11yptvf">Action</th></tr></thead><tbody><!--[-->`;
  for (let idx = 0, $$length = each_array.length; idx < $$length; idx++) {
    let item = each_array[idx];
    $$payload.out += `<tr${attr("class", `relative cursor-pointer border-b ${stringify(expandedItem === item.name ? "z-10 bg-light/10" : "")} ${stringify(store_get($$store_subs ??= {}, "$recentlyUpdated", recentlyUpdated) === item.name ? "bg-light/50" : "bg-white hover:bg-light/30")}`)}><td class="svelte-11yptvf"><img${attr("src", item.image)} class="h-auto max-h-full w-6" alt=""></td><td class="font-semibold text-secondary svelte-11yptvf">${escape_html(item.name)}</td><td class="svelte-11yptvf"><div class="flex items-center"><button aria-label="subtract quantity" class="me-3 inline-flex h-6 w-6 items-center justify-center rounded-full border border-secondary bg-white p-1 text-sm font-medium text-secondary hover:bg-light/50 focus:ring-secondary active:outline-none active:ring-1 svelte-11yptvf" type="button"><svg class="h-3 w-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 18 2"><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M1 1h16"></path></svg></button> <div><input type="number"${attr("value", item.quantity)} id="first_product" class="block w-14 rounded border border-secondary bg-light/10 px-2.5 py-1 text-sm text-secondary focus:border-accent focus:ring-accent" placeholder="1" required></div> <button aria-label="add quantity" class="ms-3 inline-flex h-6 w-6 items-center justify-center rounded-full border border-secondary bg-white p-1 text-sm font-medium text-secondary hover:bg-light/50 focus:ring-secondary active:outline-none active:ring-1 svelte-11yptvf" type="button"><svg class="h-3 w-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 18 18"><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 1v16M1 9h16"></path></svg></button></div></td><td class="font-semibold text-secondary svelte-11yptvf">D${escape_html(item.price)}</td><td class="font-semibold text-secondary svelte-11yptvf">D${escape_html(item.price * store_get($$store_subs ??= {}, "$currentOrder", currentOrder).items[idx].quantity)}</td><td class="svelte-11yptvf"><div class="flex items-center gap-2"><button aria-label="Remove product" class="text-red-500 hover:text-red-700 svelte-11yptvf"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="h-5 w-5"><path stroke-linecap="round" stroke-linejoin="round" d="M14.74 9l-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 01-2.244 2.077H8.084a2.25 2.25 0 01-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 00-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 013.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 00-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 00-7.5 0"></path></svg></button> `;
    if (item.notes?.length) {
      $$payload.out += "<!--[-->";
      $$payload.out += `<div class="flex h-5 w-5 items-center justify-center rounded-full bg-accent/10 text-xs font-medium text-accent">${escape_html(item.notes.length)}</div>`;
    } else {
      $$payload.out += "<!--[!-->";
    }
    $$payload.out += `<!--]--></div></td></tr> `;
    if (expandedItem === item.name) {
      $$payload.out += "<!--[-->";
      const each_array_1 = ensure_array_like(item.notes || []);
      $$payload.out += `<tr class="relative border-b bg-light/5"><td class="absolute left-0 top-0 h-full w-1 bg-accent/20 svelte-11yptvf"></td><td colspan="6" class="px-6 py-4 svelte-11yptvf"><div class="flex flex-col gap-3"><div class="flex items-center gap-2"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="h-4 w-4 text-accent"><path stroke-linecap="round" stroke-linejoin="round" d="M9.568 3H5.25A2.25 2.25 0 003 5.25v4.318c0 .597.237 1.17.659 1.591l9.581 9.581c.699.699 1.78.872 2.607.33a18.095 18.095 0 005.223-5.223c.542-.827.369-1.908-.33-2.607L11.16 3.66A2.25 2.25 0 009.568 3z"></path><path stroke-linecap="round" stroke-linejoin="round" d="M6 6h.008v.008H6V6z"></path></svg> <h3 class="text-sm font-medium text-secondary">Notes &amp; Tags</h3></div> <div class="flex flex-wrap gap-2"><!--[-->`;
      for (let noteIdx = 0, $$length2 = each_array_1.length; noteIdx < $$length2; noteIdx++) {
        let note = each_array_1[noteIdx];
        $$payload.out += `<div class="flex items-center gap-1.5 rounded-full border border-gray-100 bg-white px-3 py-1.5 text-sm shadow-sm"><span class="text-secondary">${escape_html(note)}</span> <button class="text-red-400 transition-colors hover:text-red-600 svelte-11yptvf">×</button></div>`;
      }
      $$payload.out += `<!--]--></div> <form class="mt-1 flex items-center gap-2"><div aria-label="Add note" data-action="add-note" class="relative block max-w-xs flex-1"><input name="newNote" type="text"${attr("value", inputValue)} placeholder="Add a note or tag" class="w-full rounded-full border border-gray-200 bg-white py-2 pl-4 pr-12 text-sm text-secondary placeholder-gray-400 focus:border-accent focus:ring-1 focus:ring-accent/20"> <button aria-label="Add note" type="button" class="absolute right-1.5 top-1/2 inline-flex h-6 w-6 -translate-y-1/2 items-center justify-center rounded-full bg-accent text-white transition-colors hover:bg-accent/90 focus:ring-2 focus:ring-accent/20 svelte-11yptvf"><svg class="h-3.5 w-3.5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path></svg></button> `;
      {
        $$payload.out += "<!--[!-->";
      }
      $$payload.out += `<!--]--></div></form></div></td></tr>`;
    } else {
      $$payload.out += "<!--[!-->";
    }
    $$payload.out += `<!--]-->`;
  }
  $$payload.out += `<!--]--></tbody></table></div></div> `;
  NewCustomerModal($$payload, {
    isOpen: isAddingNewCustomer,
    onClose: () => isAddingNewCustomer = false,
    onSubmit: handleAddNewCustomer
  });
  $$payload.out += `<!----> <div class="action-btns flex items-center justify-between pb-1"><div class="text-2xl font-semibold"><span>D${escape_html(store_get($$store_subs ??= {}, "$currentOrder", currentOrder).total)}</span></div> <div class="button-text flex justify-end gap-4"><button${attr("disabled", !store_get($$store_subs ??= {}, "$currentOrder", currentOrder).total || !!store_get($$store_subs ??= {}, "$currentOrder", currentOrder).order_id, true)} class="whitespace-nowrap rounded bg-attention p-2.5 svelte-11yptvf">Clear Order</button> `;
  if (!store_get($$store_subs ??= {}, "$currentOrder", currentOrder).order_id) {
    $$payload.out += "<!--[-->";
    $$payload.out += `<button${attr("disabled", !store_get($$store_subs ??= {}, "$currentOrder", currentOrder).total || isInvalid, true)} class="whitespace-nowrap rounded border border-accent p-2.5 text-accent ring-accent hover:ring-2 svelte-11yptvf">Quick Order</button>`;
  } else {
    $$payload.out += "<!--[!-->";
  }
  $$payload.out += `<!--]--> <button${attr("disabled", !store_get($$store_subs ??= {}, "$currentOrder", currentOrder).total || isInvalid, true)} class="whitespace-nowrap rounded bg-accent p-2.5 svelte-11yptvf">${escape_html(!store_get($$store_subs ??= {}, "$currentOrder", currentOrder).order_id ? "Place Order" : "Update Order")}</button></div></div></div>`;
  if ($$store_subs) unsubscribe_stores($$store_subs);
  pop();
}
function BarcodeScanner($$payload, $$props) {
  push();
  var $$store_subs;
  let onScan = $$props["onScan"];
  let buffer = "";
  let lastKeyTime = 0;
  const BARCODE_TIMEOUT = 50;
  function handleKeydown(e) {
    const currentTime = Date.now();
    if (currentTime - lastKeyTime > BARCODE_TIMEOUT && buffer.length > 0) {
      buffer = "";
    }
    lastKeyTime = currentTime;
    if (/[\w]/.test(e.key) && !e.ctrlKey && !e.altKey && !e.metaKey) {
      buffer += e.key;
    }
    if (e.key === "Enter" && buffer.length > 0) {
      buffer = buffer.replace("Enter", "").trim();
      if (buffer.length === 0) return;
      console.log("Scanning barcode: ", buffer);
      const product = getProductByBarcode(buffer, store_get($$store_subs ??= {}, "$displayProducts", displayProducts));
      if (product) {
        onScan(product);
      }
      buffer = "";
      e.preventDefault();
      e.stopImmediatePropagation();
      e.stopPropagation();
    }
  }
  onDestroy(() => {
    window.removeEventListener("keydown", handleKeydown);
  });
  if ($$store_subs) unsubscribe_stores($$store_subs);
  bind_props($$props, { onScan });
  pop();
}
function _page($$payload, $$props) {
  push();
  var $$store_subs;
  let categoryHeight = 0;
  function handleScannedProduct(product) {
    if (!(!product.is_stock || product.is_stock && product.qty)) return;
    if (product.variants?.length) ;
    else {
      addProduct(product);
    }
  }
  let $$settled = true;
  let $$inner_payload;
  function $$render_inner($$payload2) {
    BarcodeScanner($$payload2, { onScan: handleScannedProduct });
    $$payload2.out += `<!----> `;
    Container($$payload2, {
      class: "grid flex-grow grid-cols-10 overflow-hidden",
      children: ($$payload3) => {
        $$payload3.out += `<div class="col-span-5 flex gap-4">`;
        CategorySelector($$payload3);
        $$payload3.out += `<!----> <section${attr("style", `--category: ${stringify(categoryHeight)}px;`)} class="flex w-full flex-col gap-1"><h3 class="subheading flex items-center gap-2">Products <span class="h-[32px] rounded-lg bg-gray-100 p-2 text-sm text-secondary">${escape_html(store_get($$store_subs ??= {}, "$displayProducts", displayProducts).length)}</span></h3> <div class="flex justify-between gap-8">`;
        SearchInput($$payload3, {
          get value() {
            return store_get($$store_subs ??= {}, "$search", search);
          },
          set value($$value) {
            store_set(search, $$value);
            $$settled = false;
          }
        });
        $$payload3.out += `<!----> <button class="flex items-center gap-2 rounded-lg bg-gray-100 p-4 text-sm text-secondary hover:bg-gray-200">`;
        if (store_get($$store_subs ??= {}, "$isGridView", isGridView)) {
          $$payload3.out += "<!--[-->";
          $$payload3.out += `<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 24 24" fill="none" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path></svg>`;
        } else {
          $$payload3.out += "<!--[!-->";
          $$payload3.out += `<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 24 24" fill="none" stroke="currentColor"><rect x="3" y="3" width="7" height="7" rx="1" stroke-width="2"></rect><rect x="14" y="3" width="7" height="7" rx="1" stroke-width="2"></rect><rect x="3" y="14" width="7" height="7" rx="1" stroke-width="2"></rect><rect x="14" y="14" width="7" height="7" rx="1" stroke-width="2"></rect></svg>`;
        }
        $$payload3.out += `<!--]--></button></div> `;
        if (store_get($$store_subs ??= {}, "$isGridView", isGridView)) {
          $$payload3.out += "<!--[-->";
          const each_array = ensure_array_like(store_get($$store_subs ??= {}, "$displayProducts", displayProducts));
          $$payload3.out += `<div class="scrollbar xxl:grid-cols-5 mt-2 grid h-[calc(100vh-200px)] grid-cols-2 place-content-start gap-2 overflow-y-scroll lg:grid-cols-3"><!--[-->`;
          for (let $$index = 0, $$length = each_array.length; $$index < $$length; $$index++) {
            let product = each_array[$$index];
            $$payload3.out += `<div class="w-full">`;
            ProductCard($$payload3, { product });
            $$payload3.out += `<!----></div>`;
          }
          $$payload3.out += `<!--]--></div>`;
        } else {
          $$payload3.out += "<!--[!-->";
          const each_array_1 = ensure_array_like(store_get($$store_subs ??= {}, "$displayProducts", displayProducts));
          $$payload3.out += `<div class="scrollbar mt-2 h-[calc(100vh-200px)] overflow-y-scroll"><table class="w-full border-collapse"><thead class="sticky top-0 bg-white"><tr class="border-b text-left"><th class="p-3">Name</th><th class="p-3 text-right">Price</th><th class="p-3 text-right">Stock</th></tr></thead><tbody><!--[-->`;
          for (let $$index_1 = 0, $$length = each_array_1.length; $$index_1 < $$length; $$index_1++) {
            let product = each_array_1[$$index_1];
            ProductListItem($$payload3, { product });
          }
          $$payload3.out += `<!--]--></tbody></table></div>`;
        }
        $$payload3.out += `<!--]--></section></div> <div class="col-span-5 h-full pl-4 pr-1">`;
        Order($$payload3);
        $$payload3.out += `<!----></div>`;
      },
      $$slots: { default: true }
    });
    $$payload2.out += `<!---->`;
  }
  do {
    $$settled = true;
    $$inner_payload = copy_payload($$payload);
    $$render_inner($$inner_payload);
  } while (!$$settled);
  assign_payload($$payload, $$inner_payload);
  if ($$store_subs) unsubscribe_stores($$store_subs);
  pop();
}
export {
  _page as default
};
