# 1. Create api_documentation.py in frappe_doc/frappe_doc/
# Path: frappe_doc/frappe_doc/api_documentation.py

import frappe
import inspect
import ast
import json
import functools
from pathlib import Path
from typing import Dict, List, Optional, Callable


def swagger_doc(**kwargs):
    """Decorator to mark and document API endpoints for Swagger."""

    def decorator(func: Callable) -> Callable:
        func._swagger_doc = {
            "include_in_spec": True,
            "summary": kwargs.get("summary", ""),
            "description": kwargs.get("description", ""),
            "parameters": kwargs.get("parameters", []),
            "responses": kwargs.get(
                "responses", {"200": {"description": "Successful response"}}
            ),
            "tags": kwargs.get("tags", []),
            "deprecated": kwargs.get("deprecated", False),
        }

        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            return func(*args, **kwargs)

        return wrapper

    return decorator


class FrappeSwaggerGenerator:
    """Swagger documentation generator for Frappe Framework applications."""

    def __init__(self, app_name: str):
        self.app_name = app_name
        self.app_path = frappe.get_app_path(app_name)
        self.docs_output = {}

    def generate_openapi_spec(self) -> Dict:
        """Generates Swagger 2.0 specification."""
        openapi = {
            "swagger": "2.0",
            "info": {
                "title": f"{self.app_name} API",
                "version": "1.0.0",
                "description": f"API documentation for {self.app_name}"
            },
            "host": frappe.utils.get_host_name(),
            "basePath": "/api",
            "schemes": ["http", "https"],
            "consumes": ["application/json"],
            "produces": ["application/json"],
            "paths": {},
            "definitions": {},
            "securityDefinitions": {
                "ApiKey": {
                    "type": "apiKey",
                    "name": "api_key",
                    "in": "header"
                },
                "ApiSecret": {
                    "type": "apiKey",
                    "name": "api_secret",
                    "in": "header"
                }
            },
            "security": [
                {
                    "ApiKey": [],
                    "ApiSecret": []
                }
            ]
        }
        
        for path in Path(self.app_path).rglob("*.py"):
            if not str(path.relative_to(self.app_path)).startswith((".", "_")):
                self._analyze_file(path, openapi)
        
        return openapi

    def _analyze_file(self, file_path: Path, openapi: Dict):
        """Analyzes a Python file for API endpoints."""
        module_name = (
            str(file_path.relative_to(self.app_path))
            .replace("/", ".")
            .replace(".py", "")
        )

        try:
            module = frappe.get_module(f"{self.app_name}.{module_name}")
        except ImportError:
            return

        for name, obj in inspect.getmembers(module):
            if inspect.isfunction(obj) and hasattr(obj, "_swagger_doc"):
                self._process_documented_function(obj, openapi)

    def _process_documented_function(self, func: Callable, openapi: Dict):
        """Processes a function with swagger_doc decorator."""
        route = None
        method = "get"  # default method

        # Get the route from Frappe's whitelist decorator
        for decorator in getattr(func, "_decorators", []):
            if isinstance(decorator, str) and decorator.startswith(
                ("get", "post", "put", "delete")
            ):
                method, path = decorator.split(" ", 1)
                route = path.strip("\"'")
                break

        if not route:
            return

        swagger_doc = func._swagger_doc
        if not swagger_doc.get("include_in_spec", True):
            return

        if route not in openapi["paths"]:
            openapi["paths"][route] = {}

        method = method.lower()
        operation = {
            "summary": swagger_doc.get("summary", ""),
            "description": swagger_doc.get("description", ""),
            "tags": swagger_doc.get("tags", []),
            "responses": swagger_doc.get(
                "responses", {"200": {"description": "Successful response"}}
            ),
            "deprecated": swagger_doc.get("deprecated", False),
            "security": [{"ApiKey": [], "ApiSecret": []}],
        }

        if swagger_doc.get("parameters"):
            operation["parameters"] = swagger_doc["parameters"]

        openapi["paths"][route][method] = operation


@frappe.whitelist(allow_guest=True)
def get_swagger_spec():
    """Endpoint to get Swagger specification."""
    try:
        generator = FrappeSwaggerGenerator("frappe_doc")
        spec = generator.generate_openapi_spec()
        

        # frappe.local.response.update({"status": "success", "data": spec})
        # frappe.local.response.headers["Content-Type"] = "application/json"
        return spec
    except Exception as e:
        frappe.local.response.http_status_code = 500
        return {"error": str(e)}
    
    