# # from agno.agent import Agent
# # from agno.knowledge.pdf_url import PDFUrlKnowledgeBase
# # from agno.vectordb.pgvector import PgVector

# # db_url = "postgresql://neondb_owner:npg_FIHQ24iOyCob@ep-young-night-a8nio0y1-pooler.eastus2.azure.neon.tech/neondb?sslmode=require"

# # vector_db = PgVector(table_name="gamswitch", db_url=db_url)

# # knowledge_base = PDFUrlKnowledgeBase(
# #     vector_db=vector_db,
# # )
# # knowledge_base.load(recreate=False)  # Comment out after first run

# # agent = Agent(knowledge=knowledge_base, show_tool_calls=True)
# # agent.print_response("How much is the gamswitch charges?", markdown=True)

# from agno.agent import Agent
# from agno.model.openai import OpenAIChat
# from agno.embedder.openai import OpenAIEmbedder
# from agno.knowledge.pdf import PDFUrlKnowledgeBase
# from agno.vectordb.lancedb import LanceDb, SearchType

# # Create a knowledge base from a PDF
# knowledge_base = PDFUrlKnowledgeBase(
#     urls=["https://phi-public.s3.amazonaws.com/recipes/ThaiRecipes.pdf"],
#     # Use LanceDB as the vector database
#     vector_db=LanceDb(
#         table_name="recipes",
#         uri="tmp/lancedb",
#         search_type=SearchType.vector,
#         embedder=OpenAIEmbedder(model="text-embedding-3-small"),
#     ),
# )
# # Comment out after first run as the knowledge base is loaded
# knowledge_base.load()

# agent = Agent(
#     model=OpenAIChat(id="gpt-4o"),
#     # Add the knowledge base to the agent
#     knowledge=knowledge_base,
#     show_tool_calls=True,
#     markdown=True,
# )
# agent.print_response("How do I make chicken and galangal in coconut milk soup", stream=True)
