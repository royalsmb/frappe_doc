# Copyright (c) 2024, Jokoor and contributors
# For license information, please see license.txt

import frappe
from frappe.model.document import Document
from erpnext.manufacturing.doctype.work_order.work_order import make_stock_entry


class FoodProduction(Document):
	pass
	@frappe.whitelist()
	def create_work_order(self):
		for item in doc.items:
			item_doc = frappe.get_doc("Item", item.item_code)
			if item_doc.default_bom:
				bom_doc = frappe.get_doc("BOM", item_doc.default_bom)
				wo = frappe.new_doc("Work Order")
				wo.company = frappe.get_last_doc("Company").name
				wo.production_item = item.item_code
				wo.item_name = item.item_name
				wo.qty = item.qty
				wo.bom_no = item_doc.default_bom
				for bom_item in bom_doc.items:
					wo.append("required_items", {
						'item_code': bom_item.item_code,
						'required_qty': bom_item.qty,
						'rate': bom_item.rate,
						'include_item_in_manufacturing': 1,

					})
				wo.skip_transfer = 1
				wo.fg_warehouse = 'Stores - R'
				wo.insert(ignore_permissions=True)
				wo.submit()
				make_stock_entry(wo.name, "Material Transfer for Manufacture")
				create_stock_entry(wo.name)
				frappe.db.set_value("Work Order", wo.name, "status", "Completed")
				frappe.db.commit()


	@frappe.whitelist()
	def create_stock_entry(work_order_id):
		from erpnext.manufacturing.doctype.work_order.work_order import make_stock_entry
		wo = frappe.get_doc("Work Order", work_order_id)
		bom = frappe.get_doc("BOM", wo.bom_no)
		entry = make_stock_entry(work_order_id, "Manufacture")
		
		# Ensure the entry is created successfully
		if not entry:
			frappe.throw("Failed to create stock entry from work order")

		se = frappe.new_doc("Stock Entry")
		se.stock_entry_type = entry.get('stock_entry_type')
		se.purpose = entry.get('purpose')
		se.work_order = entry.get('work_order')
		se.from_bom = 1
		se.use_multi_level_bom = 1
		se.bom_no = entry.get('bom_no')
		se.company = entry.get('company')
		se.posting_date = entry.get('posting_date')
		se.posting_time = entry.get('posting_time')
		se.bom_no = entry.get('bom_no')
		se.fg_completed_qty = entry.get('fg_completed_qty')
		se.is_opening = entry.get('is_opening')

		# Make sure items are copied correctly
		if get_items(work_order_id):
			se.items = []
			for item in get_items(work_order_id):
				se.append('items', item)
		se.append("items", {
			"t_warehouse": wo.fg_warehouse,
			"item_code": wo.production_item,
			"is_finished_item": 1,
			"qty": wo.qty,
			"basic_rate": frappe.db.get_value("BOM", wo.bom_no, "raw_material_cost"),
			"uom": frappe.db.get_value("Item", wo.production_item, "stock_uom"),
			"use_serial_batch_fields": 1,
			"expense_account": "Stock Adjustment - R"

			
		}
		)
		
		se.insert(ignore_permissions=True)
		se.submit()
		frappe.db.commit()
		return {"status": "success", "message": "Stock entry created successfully"}

	@frappe.whitelist()
	def get_items(work_order_id):
		from erpnext.manufacturing.doctype.work_order.work_order import make_stock_entry
		entry = make_stock_entry(work_order_id, "Material Transfer for Manufacture")
		data = []
		for item in entry.get("items"):
			item_doc = frappe.get_doc("Item", item.item_code)
			df = item.item_defaults
			data.append({
				"s_warehouse": get_item_default_wh(item.item_code),
				"item_code": item.item_code,
				"item_name": item.item_name,
				"qty": item.qty,
				"transfer_qty": item.transfer_qty,
				"uom": item.uom,
				"basic_rate": item.basic_rate,
				"valuation_rate": item.valuation_rate,
				"basic_amount": item.basic_amount,
				"amount": item.amount,
				"actual_qty":item.actual_qty
			})
		return data


	@frappe.whitelist()
	def get_item_default_wh(item_code):
		item = frappe.get_doc("Item", item_code)
		if item.item_defaults:
			return item.item_defaults[0].default_warehouse
