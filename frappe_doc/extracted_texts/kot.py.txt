# Copyright (c) 2024, Jokoor and contributors
# For license information, please see license.txt

import frappe
from frappe.model.document import Document
import requests
from frappe.utils.pdf import get_pdf
from frappe.utils.print_format import download_pdf
import os
from frappe.utils.print_format import print_by_server



def get_all_kots():
    data = []
    try:
        kots = frappe.get_all('KOT')
        for kot in kots:
            kot_data = frappe.get_doc('KOT', kot.name)
            items = []
            for item in kot_data.items:
                items.append({
                    'qty': item.qty,
                    'name': item.item_code,
                })
            data.append({
                'order_id': kot_data.name,
                'table': kot_data.table or 'N/A',
                'order_number': kot_data.order_id,
                'kitchen': kot_data.kitchen_name,
                'status': kot_data.status,
                'items': items
            })
    except Exception as e:
        pass
    return data


class KOT(Document):
   
    def after_insert(self):
        try:
            print_by_server('KOT', self.name, self.kitchen, 'Kot Updated')
        except Exception as e:
            frappe.log_error(frappe.get_traceback(), "Custom Error Log")


    def print(self):
        settings = frappe.get_doc("Restaurant Settings", "Restaurant Settings")
        try:
            url = f"{settings.server_ip}/print"

            # Get the absolute file path from Frappe's public files directory
            site_path = frappe.get_site_path()
            file_path = os.path.join(
                site_path, 'public', 'files', os.path.basename(self.pdf_file_url))

            if not os.path.exists(file_path):
                frappe.log_error("PDF file not found",
                                f"File missing at {file_path}")
                return

            files = {
                'file': ('document.pdf', open(file_path, 'rb'), 'application/pdf')
            }
            data = {
                'printer_name': self.printer
            }

            try:
                response = requests.post(
                    url, files=files, data=data, timeout=5)  # Add timeout
                response.raise_for_status()
                frappe.msgprint("Document sent to printer successfully")
            except requests.exceptions.ConnectionError as e:
                frappe.log_error("Print server connection failed", str(e))
                frappe.msgprint("Printer not available. Continuing without printing.")
            except requests.exceptions.Timeout:
                frappe.log_error("Print request timeout", "Print request timed out")
                frappe.msgprint("Printer not responding. Continuing without printing.")
            except requests.exceptions.RequestException as e:
                frappe.log_error("Print request failed", str(e))
                frappe.msgprint("Unable to print. Continuing without printing.")

        except Exception as e:
            frappe.log_error("Printing error", str(e))
            frappe.msgprint("Unable to process print request. Continuing without printing.")

    def generate_multi_pdf_url(self):
        name = self.name

        doctype = "KOT"

        try:
            format = "KOT"
            download_pdf(doctype, name, format)
            pdf_content = frappe.local.response.filecontent

            if not pdf_content:
                raise ValueError(
                    "PDF content is empty or not generated correctly.")

            # Construct the filename using the document's name
            name_str = name.replace(" ", "-").replace("/", "-")
            filename = f"{name_str}.pdf"

            # Save the PDF content as a File document in the database
            _file = frappe.get_doc({
                "doctype": "File",
                "file_name": filename,
                "is_private": 0,
                "content": pdf_content
            })
            _file.save()
            frappe.db.commit()

        except Exception as e:
            frappe.log_error(f"Error generating PDF URL: {str(e)}")
            frappe.throw(f"Failed to generate PDF: {str(e)}")
