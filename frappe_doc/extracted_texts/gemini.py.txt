from agno.agent import Agent
from agno.models.google import Gemini
from agno.knowledge.pdf_url import PDFUrlKnowledgeBase
from agno.vectordb.pgvector import PgVector, SearchType
from agno.models.openai import OpenAIChat
import frappe
import os
from agno.agent import Agent, RunResponse
from agno.utils.audio import write_audio_to_file



config = frappe.get_site_config()
os.environ['GOOGLE_API_KEY'] = config.get('gemini_api_key')
os.environ['OPENAI_API_KEY'] = config.get('openai_api_key')


@frappe.whitelist(allow_guest=True)
def get_vecto_db(table_name: str = "gamswitch"):
    return PgVector(
        db_url=config.get("pg_url"),
        table_name=table_name,
    )
@frappe.whitelist(allow_guest=True)
def parse_data():
    knowledge_base = PDFUrlKnowledgeBase(
        urls = ['https://test.royalsmb.com/files/MPGS%20Agreement%20Template%20-Clean.pdf'],
        vector_db=PgVector(
            table_name="mpgs_agreement",
            db_url=config.get("pg_url"),
        
            ),
        )
    
    knowledge_base.load(upsert=True)
    agent = Agent(
        model=OpenAIChat(id="gpt-4o-2024-08-06"),
        knowledge=knowledge_base,
        markdown=True
        )

    # Detailed, step-by-step dialogue generation
    response: RunResponse =  agent.run(
        "Analyze the document and create a detailed, engaging conversation between John (male) and Emily (female). "
        "They should **cover every detail, section by section, without summarizing entire sections at once**. "
        "Ensure that **each exchange focuses on one key idea and fully explores it** before moving to the next. "
        "The discussion should be **logical, engaging, and connected**, avoiding any mention of pages or specific locations."
    ).get_content_as_string()
    return response

@frappe.whitelist(allow_guest=True)
def check_vector_db():
    vector_db = get_vecto_db()
    results = vector_db.search("test query")
    return results


@frappe.whitelist(allow_guest=True)
def run_agent():
    db_url = config.get("pg_url")

    vector_db = PgVector(table_name="gamswitch", db_url=db_url)

    knowledge_base = PDFUrlKnowledgeBase(
        vector_db=vector_db,
    )
    knowledge_base.load(recreate=False)  # Comment out after first run

    agent = Agent(
        knowledge=knowledge_base, 
        model=OpenAIChat(
            id="gpt-4o-audio-preview",
            modalities=["text", "audio"],
            audio={"voice": "alloy", "format": "wav"},
            instructions="You are a helpful assistant. Please provide a detailed explanation of the entire agreement of gamswitch in a podcast format where you are explaining the agreement to a friend who is new to the industry.",
            
        ),
        
        show_tool_calls=True
        )
    response: RunResponse = agent.run("Can you please explain the entire agreement of gamswitch", markdown=True)

    if response.response_audio is not None:
        write_audio_to_file(
            audio=agent.run_response.response_audio.content, filename="/home/frappe/Downloads/one.wav"
        )
    return response.get_content_as_string()