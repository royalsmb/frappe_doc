import frappe
from frappe.utils import flt

def execute(filters=None):
    columns = get_columns(filters)
    data = get_data(filters)
    return columns, data


def get_columns(filters):
    report_pershift =  [
        {
            "label": "Date",
            "fieldname": "posting_date",
            "fieldtype": "Date",
            "width": 150
        },
        {
            "label": "Invoice",
            "fieldname": "invoice",
            "fieldtype": "Link",
            "options": "Sales Invoice",
            "width": 200
        },
        {
            "label": "Customer",
            "fieldname": "customer",
            "fieldtype": "Link",
            "options": "Customer",
            "width": 200
        },
        {
            "label": "Outlet",
            "fieldname": "warehouse",
            "fieldtype": "Link",
            "options": "Warehouse",
            "width": 200
        },
        {
            "label": "Quantity",
            "fieldname": "qty",
            "fieldtype": "Float",
            "precision": 0,
            "width": 150
        },
        {
            "label": "Amount",
            "fieldname": "amount",
            "fieldtype": "Currency",
            "width": 120
        },
        {
            "label": "Sales Type",
            "fieldname": "sales_type",
            "fieldtype": "Data",
            "width": 150
            
		},


        
    ]
    report_perday =  [
        {
            "label": "Date",
            "fieldname": "posting_date",
            "fieldtype": "Date",
            "width": 150
        },
        {
            "label": "Invoice",
            "fieldname": "invoice",
            "fieldtype": "Link",
            "options": "Sales Invoice",
            "width": 200
        },
        {
            "label": "Customer",
            "fieldname": "customer",
            "fieldtype": "Link",
            "options": "Customer",
            "width": 200
        },
        {
            "label": "Outlet",
            "fieldname": "warehouse",
            "fieldtype": "Link",
            "options": "Warehouse",
            "width": 200
        },
        {
            "label": "Quantity",
            "fieldname": "qty",
            "fieldtype": "Float",
            "precision": 0,
            "width": 150
        },
        {
            "label": "Amount",
            "fieldname": "amount",
            "fieldtype": "Currency",
            "width": 120
        },
        {
            "label": "Sales Type",
            "fieldname": "sales_type",
            "fieldtype": "Data",
            "width": 150
        },
        {
            "label": "Payment Modes",
            "fieldname": "payment_modes",
            "fieldtype": "Data",
            "width": 150
        }
    ]
    columns = report_perday if filters.get('report_type') == 'Report Per Day' else report_pershift
    return columns

def get_data(filters):
    conditions = """
        WHERE si.docstatus = 1 
        AND si.status IN ('Paid', 'Unpaid', 'Partly Paid', 'Overdue')
        AND si.posting_date BETWEEN %(from_date)s AND %(to_date)s
    """
    
    if filters.get("warehouse"):
        conditions += " AND sii.warehouse = %(warehouse)s"
    if filters.get("customer"):
        conditions += " AND si.customer = %(customer)s"
    if filters.get('company'):
        conditions += " AND si.company = %(company)s"
    if filters.get('shift'):
        conditions += " AND si.shift = %(shift)s"
    if filters.get('mode_of_payment'):
        conditions += """ AND EXISTS (
            SELECT 1 FROM `tabSales Invoice Payment` sip 
            WHERE sip.parent = si.name 
            AND sip.mode_of_payment = %(mode_of_payment)s
        )"""

    query = """
        SELECT 
            si.posting_date,
            si.name as invoice,
            si.customer,
            sii.warehouse,
            SUM(sii.qty) as qty,
            SUM(sii.amount) as amount,
            CASE 
				WHEN (SELECT customer.customer_group FROM `tabCustomer` customer WHERE customer.name = si.customer) = 'Management' THEN 'Management'
                WHEN si.status = 'Paid' THEN 'Paid'
                WHEN si.status = 'Unpaid' OR si.status = 'Overdue' THEN 'Unpaid'
                WHEN si.status = 'Partly Pad' THEN 'Partly Paid'
               
            END as sales_type,
            (
                SELECT GROUP_CONCAT(DISTINCT sip.mode_of_payment)
                FROM `tabSales Invoice Payment` sip
                WHERE sip.parent = si.name
            ) as payment_modes
        FROM 
            `tabSales Invoice` si
            INNER JOIN `tabSales Invoice Item` sii ON si.name = sii.parent
        {conditions}
        GROUP BY si.name, sii.warehouse
        ORDER BY si.posting_date DESC
    """.format(conditions=conditions)

    data = frappe.db.sql(query, filters, as_dict=1)
    return data

@frappe.whitelist()
@frappe.validate_and_sanitize_search_inputs
def get_pos_warehouses(doctype, txt, searchfield, start, page_len, filters):
    return frappe.db.sql("""
        SELECT DISTINCT pw.warehouse
        FROM `tabProfile Warehouses` pw
        INNER JOIN `tabWarehouse` w ON w.name = pw.warehouse
        WHERE w.company = %(company)s
        AND (pw.warehouse LIKE %(txt)s OR w.warehouse_name LIKE %(txt)s)
        LIMIT %(limit)s OFFSET %(offset)s
    """, {
        'company': filters.get('company'),
        'txt': '%{}%'.format(txt or ''),
        'limit': page_len,
        'offset': start
    })

@frappe.whitelist()
@frappe.validate_and_sanitize_search_inputs
def get_pos_shifts(doctype, txt, searchfield, start, page_len, filters):
    return frappe.db.sql("""
        SELECT name, posting_date, user
        FROM `tabPOS Shift`
        ORDER BY creation DESC
        LIMIT %s OFFSET %s
    """, (page_len, start))